(in-ns 'roman-numerals)
(numerals 10)
(refer 'roman-numerals)
(exit)
(refer roman-numerals)
(require '[roman-numerals :as r])
(r/numerals 100)
(r/numeral n 0)
(filter #(not= \0 %) (str 100))
(filter #(not= \0 %) (str 101))
(map-indexed #([(Character/digit %2 10) (Math/pow 10 (%1))]) (filter #(not= \0 %) (str 101)))
(map-indexed #(vec (Character/digit %2 10) (Math/pow 10 (%1)))) (filter #(not= \0 %) (str 101)))
(map-indexed #(vec (Character/digit %2 10) (Math/pow 10 (%1))) (filter #(not= \0 %) (str 101)))
(map-indexed #(vector (Character/digit %2 10) (Math/pow 10 (%1))) (filter #(not= \0 %) (str 101)))
(map-indexed #(vector (Character/digit %2 10) (Math/pow 10 %1))) (filter #(not= \0 %) (str 101)))
(map-indexed #(vector (Character/digit %2 10) (Math/pow 10 %1)) (filter #(not= \0 %) (str 101)))
(map-indexed #(vector (Character/digit %2 10) (Math/pow 10 %1)) (filter #(not= \0 %) (str 54321)))
(zipmap (range (count (str 54321)) (str 54321)))
(zipmap (range (count (str 54321))) (str 54321))
(zipmap (reverse (range (count (str 54321)))) (str 54321))
(map str (zipmap (reverse (range (count (str 54321)))) (str 54321)))
(require '[roman-numerals :as r])
(r/values 543210)
(reload)
(r/values 543210)
(require '[roman-numerals :as r])
(r/values 543210)
(exit)
(r/values 543210)
(require '[roman-numerals :as r])
(r/values 543210)
(use 'roman-numerals :reload)
(values 5040302010)
(map #(fn[k v] (str k v)) (zipmap (reverse (range (count (str 54321)))) (str 54321)))
(map #(fn [k v] (str k v)) (zipmap (reverse (range (count (str 54321)))) (str 54321)))
(map #(fn [[k v]] (str k v)) (zipmap (reverse (range (count (str 54321)))) (str 54321)))
(map (fn [[k v]] (str k v)) (zipmap (reverse (range (count (str 54321)))) (str 54321)))
(values 5040302010)
(use 'roman-numerals :reload)
(values 5040302010)
(use 'roman-numerals :reload)
(values 5040302010)
(use 'roman-numerals :reload)
(literal 1)
(literal 10)
(literal 100)
(literal 1000)
(use 'roman-numerals :reload)
(numerals 1)
(use 'roman-numerals :reload)
(numerals 1)
(literal 1.0)
(literal (int 1.0))
(use 'roman-numerals :reload)
(numerals 1)
(numerals 2)
(numerals 3)
(numerals 4)
(numerals 4)5
(numerals 6)
(use 'roman-numerals :reload)
(numerals 6)
(numerals 5)
(numerals 4)
(numerals 7)
(numerals 8)
(numerals 9)
(numerals 10)
